/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ek7yevYSmZU9MaEHzjjyJ
// Component: v0QNEp-b2qKw

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdInputNumber } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdSelect } from "@plasmicpkgs/antd5/skinny/registerSelect";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";

import { useScreenVariants as useScreenVariantsqAyk5ZgNfB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: q_ayk5ZGNfB_/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4ek7yevYSmZU9MaEHzjjyJ/projectcss
import sty from "./PlasmicFormPrivates.module.css"; // plasmic-import: v0QNEp-b2qKw/css

createPlasmicElementProxy;

export type PlasmicFormPrivates__VariantMembers = {};
export type PlasmicFormPrivates__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormPrivates__VariantsArgs;
export const PlasmicFormPrivates__VariantProps = new Array<VariantPropType>();

export type PlasmicFormPrivates__ArgsType = {
  privatesForm2?: any;
  onPrivatesFormChange?: (val: any) => void;
};
type ArgPropType = keyof PlasmicFormPrivates__ArgsType;
export const PlasmicFormPrivates__ArgProps = new Array<ArgPropType>(
  "privatesForm2",
  "onPrivatesFormChange"
);

export type PlasmicFormPrivates__OverridesType = {
  root?: Flex__<"div">;
  privatesForm?: Flex__<typeof FormWrapper>;
  firstName?: Flex__<typeof FormItemWrapper>;
  firstNameText?: Flex__<"div">;
  firstNameInput?: Flex__<typeof AntdInput>;
  lastName?: Flex__<typeof FormItemWrapper>;
  lastNameText?: Flex__<"div">;
  lastNameInput?: Flex__<typeof AntdInput>;
  phone?: Flex__<typeof FormItemWrapper>;
  phoneText?: Flex__<"div">;
  phoneInput?: Flex__<typeof AntdInput>;
  email?: Flex__<typeof FormItemWrapper>;
  emailText?: Flex__<"div">;
  emailInput?: Flex__<typeof AntdInput>;
  expectedGuestsForm?: Flex__<typeof FormItemWrapper>;
  expectedGuestsText?: Flex__<"div">;
  expectedGuestsInput?: Flex__<typeof AntdInputNumber>;
  interestedInForm?: Flex__<typeof FormItemWrapper>;
  interestedInText?: Flex__<"div">;
  interestedInSelect?: Flex__<typeof AntdSelect>;
  createdat?: Flex__<typeof FormItemWrapper>;
  createdAtInput?: Flex__<typeof AntdInput>;
  commentsForm?: Flex__<typeof FormItemWrapper>;
  commentsText?: Flex__<"div">;
  commentsInput?: Flex__<typeof AntdInput>;
  submitButton?: Flex__<typeof AntdButton>;
  id?: Flex__<typeof FormItemWrapper>;
  idInput?: Flex__<typeof AntdInputNumber>;
};

export interface DefaultFormPrivatesProps {
  privatesForm2?: any;
  onPrivatesFormChange?: (val: any) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormPrivates__RenderFunc(props: {
  variants: PlasmicFormPrivates__VariantsArgs;
  args: PlasmicFormPrivates__ArgsType;
  overrides: PlasmicFormPrivates__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "privatesForm.value",
        type: "writable",
        variableType: "object",

        valueProp: "privatesForm2",
        onChangeProp: "onPrivatesFormChange",
        refName: "privatesForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "privatesForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "privatesForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "idInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "firstNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "lastNameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "phoneInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "expectedGuestsInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "interestedInSelect.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "createdAtInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "commentsInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsqAyk5ZgNfB()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__o5HIi)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__wZriG
          )}
        >
          {"Privates Inquiry Form"}
        </div>
        {(() => {
          const child$Props = {
            className: classNames("__wab_instance", sty.privatesForm),
            extendedOnValuesChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "value",
                ["privatesForm", "value"],
                FormWrapper_Helpers
              ).apply(null, eventArgs);
            },
            formItems: [
              { label: "Name", name: "name", inputType: "Text" },
              { label: "Message", name: "message", inputType: "Text Area" }
            ],
            labelCol: { span: 8, horizontalOnly: true },
            layout: "vertical",
            mode: "advanced",
            onFinish: async values => {
              const $steps = {};

              $steps["defaultSubmit"] = true
                ? (() => {
                    const actionArgs = {
                      dataOp: {
                        sourceId: "wp17K6dTyNJfMVu3RB7ygH",
                        opId: "5c1fbbd2-cada-4407-817b-171d8f26bb58",
                        userArgs: {
                          variables: [$state.privatesForm.value]
                        },
                        cacheKey: null,
                        invalidatedKeys: ["plasmic_refresh_all"],
                        roleId: null
                      }
                    };
                    return (async ({ dataOp, continueOnError }) => {
                      try {
                        const response = await executePlasmicDataOp(dataOp, {
                          userAuthToken: dataSourcesCtx?.userAuthToken,
                          user: dataSourcesCtx?.user
                        });
                        await plasmicInvalidate(dataOp.invalidatedKeys);
                        return response;
                      } catch (e) {
                        if (!continueOnError) {
                          throw e;
                        }
                        return e;
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["defaultSubmit"] != null &&
                typeof $steps["defaultSubmit"] === "object" &&
                typeof $steps["defaultSubmit"].then === "function"
              ) {
                $steps["defaultSubmit"] = await $steps["defaultSubmit"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "Thank You for Inquiring!",
                        undefined,
                        undefined,
                        "bottom"
                      ]
                    };
                    return $globalActions[
                      "plasmic-antd5-config-provider.showNotification"
                    ]?.apply(null, [...actionArgs.args]);
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }

              $steps["runActionOnPrivatesForm2"] = true
                ? (() => {
                    const actionArgs = {
                      tplRef: "privatesForm",
                      action: "resetFields"
                    };
                    return (({ tplRef, action, args }) => {
                      return $refs?.[tplRef]?.[action]?.(...(args ?? []));
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runActionOnPrivatesForm2"] != null &&
                typeof $steps["runActionOnPrivatesForm2"] === "object" &&
                typeof $steps["runActionOnPrivatesForm2"].then === "function"
              ) {
                $steps["runActionOnPrivatesForm2"] = await $steps[
                  "runActionOnPrivatesForm2"
                ];
              }
            },
            onIsSubmittingChange: async (...eventArgs: any) => {
              generateStateOnChangePropForCodeComponents(
                $state,
                "isSubmitting",
                ["privatesForm", "isSubmitting"],
                FormWrapper_Helpers
              ).apply(null, eventArgs);
            },
            ref: ref => {
              $refs["privatesForm"] = ref;
            },
            submitSlot: null,
            wrapperCol: { span: 16, horizontalOnly: true }
          };
          initializeCodeComponentStates(
            $state,
            [
              {
                name: "value",
                plasmicStateName: "privatesForm.value"
              },
              {
                name: "isSubmitting",
                plasmicStateName: "privatesForm.isSubmitting"
              }
            ],
            [],
            FormWrapper_Helpers ?? {},
            child$Props
          );

          return (
            <FormWrapper
              data-plasmic-name={"privatesForm"}
              data-plasmic-override={overrides.privatesForm}
              {...child$Props}
            >
              <FormItemWrapper
                data-plasmic-name={"firstName"}
                data-plasmic-override={overrides.firstName}
                className={classNames("__wab_instance", sty.firstName)}
                initialValue={undefined}
                label={
                  <div
                    data-plasmic-name={"firstNameText"}
                    data-plasmic-override={overrides.firstNameText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.firstNameText
                    )}
                  >
                    {"First Name"}
                  </div>
                }
                name={"first_name"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.firstNameInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["firstNameInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "firstNameInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "firstNameInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"firstNameInput"}
                      data-plasmic-override={overrides.firstNameInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"lastName"}
                data-plasmic-override={overrides.lastName}
                className={classNames("__wab_instance", sty.lastName)}
                initialValue={undefined}
                label={
                  <div
                    data-plasmic-name={"lastNameText"}
                    data-plasmic-override={overrides.lastNameText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.lastNameText
                    )}
                  >
                    {"Last Name"}
                  </div>
                }
                name={"last_name"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.lastNameInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["lastNameInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "lastNameInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "lastNameInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"lastNameInput"}
                      data-plasmic-override={overrides.lastNameInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"phone"}
                data-plasmic-override={overrides.phone}
                className={classNames("__wab_instance", sty.phone)}
                initialValue={undefined}
                label={
                  <div
                    data-plasmic-name={"phoneText"}
                    data-plasmic-override={overrides.phoneText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.phoneText
                    )}
                  >
                    {"Phone"}
                  </div>
                }
                name={"phone"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.phoneInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["phoneInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "phoneInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "phoneInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"phoneInput"}
                      data-plasmic-override={overrides.phoneInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"email"}
                data-plasmic-override={overrides.email}
                className={classNames("__wab_instance", sty.email)}
                label={
                  <div
                    data-plasmic-name={"emailText"}
                    data-plasmic-override={overrides.emailText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.emailText
                    )}
                  >
                    {"Email"}
                  </div>
                }
                name={"email"}
                rules={[{ ruleType: "advanced" }]}
                valuePropName={"email"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.emailInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["emailInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "emailInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "emailInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"emailInput"}
                      data-plasmic-override={overrides.emailInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <div className={classNames(projectcss.all, sty.freeBox___5B7H)}>
                <FormItemWrapper
                  data-plasmic-name={"expectedGuestsForm"}
                  data-plasmic-override={overrides.expectedGuestsForm}
                  className={classNames(
                    "__wab_instance",
                    sty.expectedGuestsForm
                  )}
                  initialValue={undefined}
                  label={
                    <div
                      data-plasmic-name={"expectedGuestsText"}
                      data-plasmic-override={overrides.expectedGuestsText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.expectedGuestsText
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Expected Guests"
                        : "Expected Number of Guests"}
                    </div>
                  }
                  name={"number_guests"}
                >
                  <AntdInputNumber
                    data-plasmic-name={"expectedGuestsInput"}
                    data-plasmic-override={overrides.expectedGuestsInput}
                    className={classNames(
                      "__wab_instance",
                      sty.expectedGuestsInput
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "expectedGuestsInput",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    type={"number"}
                    value={generateStateValueProp($state, [
                      "expectedGuestsInput",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
                <FormItemWrapper
                  data-plasmic-name={"interestedInForm"}
                  data-plasmic-override={overrides.interestedInForm}
                  className={classNames("__wab_instance", sty.interestedInForm)}
                  initialValue={undefined}
                  label={
                    <div
                      data-plasmic-name={"interestedInText"}
                      data-plasmic-override={overrides.interestedInText}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.interestedInText
                      )}
                    >
                      {"Interested In"}
                    </div>
                  }
                  name={"privates_type"}
                >
                  <AntdSelect
                    data-plasmic-name={"interestedInSelect"}
                    data-plasmic-override={overrides.interestedInSelect}
                    className={classNames(
                      "__wab_instance",
                      sty.interestedInSelect
                    )}
                    defaultStylesClassName={classNames(
                      projectcss.root_reset,
                      projectcss.plasmic_default_styles,
                      projectcss.plasmic_mixins,
                      projectcss.plasmic_tokens,
                      plasmic_antd_5_hostless_css.plasmic_tokens
                    )}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "interestedInSelect",
                        "value"
                      ]).apply(null, eventArgs);
                    }}
                    options={(() => {
                      const __composite = [
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null },
                        { type: "option", label: null, value: null }
                      ];
                      __composite["0"]["label"] = "Private Yoga";
                      __composite["0"]["value"] = "Private Yoga";
                      __composite["1"]["label"] = "Private Pilates";
                      __composite["1"]["value"] = "Private Pilates";
                      __composite["2"]["label"] = "Studio Rental";
                      __composite["2"]["value"] = "Studio Rental";
                      __composite["3"]["label"] = "Photo Shoot";
                      __composite["3"]["value"] = "Photo Shoot";
                      __composite["4"]["label"] = "Other";
                      __composite["4"]["value"] = "Other";
                      return __composite;
                    })()}
                    placeholder={"Select..."}
                    popupScopeClassName={sty["interestedInSelect__popup"]}
                    value={generateStateValueProp($state, [
                      "interestedInSelect",
                      "value"
                    ])}
                  />
                </FormItemWrapper>
              </div>
              <FormItemWrapper
                data-plasmic-name={"createdat"}
                data-plasmic-override={overrides.createdat}
                className={classNames("__wab_instance", sty.createdat)}
                hidden={true}
                initialValue={undefined}
                label={"created_at"}
                name={"created_at"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.createdAtInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["createdAtInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    value: generateStateValueProp($state, [
                      "createdAtInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "createdAtInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"createdAtInput"}
                      data-plasmic-override={overrides.createdAtInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <FormItemWrapper
                data-plasmic-name={"commentsForm"}
                data-plasmic-override={overrides.commentsForm}
                className={classNames("__wab_instance", sty.commentsForm)}
                initialValue={undefined}
                label={
                  <div
                    data-plasmic-name={"commentsText"}
                    data-plasmic-override={overrides.commentsText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.commentsText
                    )}
                  >
                    {"Comments"}
                  </div>
                }
                name={"comments"}
              >
                {(() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.commentsInput),
                    onChange: async (...eventArgs: any) => {
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["commentsInput", "value"],
                        AntdInput_Helpers
                      ).apply(null, eventArgs);
                    },
                    size: "large",
                    value: generateStateValueProp($state, [
                      "commentsInput",
                      "value"
                    ])
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "commentsInput.value"
                      }
                    ],
                    [],
                    AntdInput_Helpers ?? {},
                    child$Props
                  );

                  return (
                    <AntdInput
                      data-plasmic-name={"commentsInput"}
                      data-plasmic-override={overrides.commentsInput}
                      {...child$Props}
                    />
                  );
                })()}
              </FormItemWrapper>
              <AntdButton
                data-plasmic-name={"submitButton"}
                data-plasmic-override={overrides.submitButton}
                className={classNames("__wab_instance", sty.submitButton)}
                size={"large"}
                submitsForm={true}
                type={"primary"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__anynx
                  )}
                >
                  {"Submit"}
                </div>
              </AntdButton>
              <FormItemWrapper
                data-plasmic-name={"id"}
                data-plasmic-override={overrides.id}
                className={classNames("__wab_instance", sty.id)}
                hidden={true}
                initialValue={undefined}
                label={"privates_id"}
                name={"privates_id"}
              >
                <AntdInputNumber
                  data-plasmic-name={"idInput"}
                  data-plasmic-override={overrides.idInput}
                  className={classNames("__wab_instance", sty.idInput)}
                  onChange={async (...eventArgs: any) => {
                    generateStateOnChangeProp($state, [
                      "idInput",
                      "value"
                    ]).apply(null, eventArgs);
                  }}
                  type={"number"}
                  value={generateStateValueProp($state, ["idInput", "value"])}
                />
              </FormItemWrapper>
            </FormWrapper>
          );
        })()}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "privatesForm",
    "firstName",
    "firstNameText",
    "firstNameInput",
    "lastName",
    "lastNameText",
    "lastNameInput",
    "phone",
    "phoneText",
    "phoneInput",
    "email",
    "emailText",
    "emailInput",
    "expectedGuestsForm",
    "expectedGuestsText",
    "expectedGuestsInput",
    "interestedInForm",
    "interestedInText",
    "interestedInSelect",
    "createdat",
    "createdAtInput",
    "commentsForm",
    "commentsText",
    "commentsInput",
    "submitButton",
    "id",
    "idInput"
  ],
  privatesForm: [
    "privatesForm",
    "firstName",
    "firstNameText",
    "firstNameInput",
    "lastName",
    "lastNameText",
    "lastNameInput",
    "phone",
    "phoneText",
    "phoneInput",
    "email",
    "emailText",
    "emailInput",
    "expectedGuestsForm",
    "expectedGuestsText",
    "expectedGuestsInput",
    "interestedInForm",
    "interestedInText",
    "interestedInSelect",
    "createdat",
    "createdAtInput",
    "commentsForm",
    "commentsText",
    "commentsInput",
    "submitButton",
    "id",
    "idInput"
  ],
  firstName: ["firstName", "firstNameText", "firstNameInput"],
  firstNameText: ["firstNameText"],
  firstNameInput: ["firstNameInput"],
  lastName: ["lastName", "lastNameText", "lastNameInput"],
  lastNameText: ["lastNameText"],
  lastNameInput: ["lastNameInput"],
  phone: ["phone", "phoneText", "phoneInput"],
  phoneText: ["phoneText"],
  phoneInput: ["phoneInput"],
  email: ["email", "emailText", "emailInput"],
  emailText: ["emailText"],
  emailInput: ["emailInput"],
  expectedGuestsForm: [
    "expectedGuestsForm",
    "expectedGuestsText",
    "expectedGuestsInput"
  ],
  expectedGuestsText: ["expectedGuestsText"],
  expectedGuestsInput: ["expectedGuestsInput"],
  interestedInForm: [
    "interestedInForm",
    "interestedInText",
    "interestedInSelect"
  ],
  interestedInText: ["interestedInText"],
  interestedInSelect: ["interestedInSelect"],
  createdat: ["createdat", "createdAtInput"],
  createdAtInput: ["createdAtInput"],
  commentsForm: ["commentsForm", "commentsText", "commentsInput"],
  commentsText: ["commentsText"],
  commentsInput: ["commentsInput"],
  submitButton: ["submitButton"],
  id: ["id", "idInput"],
  idInput: ["idInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  privatesForm: typeof FormWrapper;
  firstName: typeof FormItemWrapper;
  firstNameText: "div";
  firstNameInput: typeof AntdInput;
  lastName: typeof FormItemWrapper;
  lastNameText: "div";
  lastNameInput: typeof AntdInput;
  phone: typeof FormItemWrapper;
  phoneText: "div";
  phoneInput: typeof AntdInput;
  email: typeof FormItemWrapper;
  emailText: "div";
  emailInput: typeof AntdInput;
  expectedGuestsForm: typeof FormItemWrapper;
  expectedGuestsText: "div";
  expectedGuestsInput: typeof AntdInputNumber;
  interestedInForm: typeof FormItemWrapper;
  interestedInText: "div";
  interestedInSelect: typeof AntdSelect;
  createdat: typeof FormItemWrapper;
  createdAtInput: typeof AntdInput;
  commentsForm: typeof FormItemWrapper;
  commentsText: "div";
  commentsInput: typeof AntdInput;
  submitButton: typeof AntdButton;
  id: typeof FormItemWrapper;
  idInput: typeof AntdInputNumber;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormPrivates__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormPrivates__VariantsArgs;
    args?: PlasmicFormPrivates__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormPrivates__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormPrivates__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormPrivates__ArgProps,
          internalVariantPropNames: PlasmicFormPrivates__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormPrivates__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFormPrivates";
  } else {
    func.displayName = `PlasmicFormPrivates.${nodeName}`;
  }
  return func;
}

export const PlasmicFormPrivates = Object.assign(
  // Top-level PlasmicFormPrivates renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    privatesForm: makeNodeComponent("privatesForm"),
    firstName: makeNodeComponent("firstName"),
    firstNameText: makeNodeComponent("firstNameText"),
    firstNameInput: makeNodeComponent("firstNameInput"),
    lastName: makeNodeComponent("lastName"),
    lastNameText: makeNodeComponent("lastNameText"),
    lastNameInput: makeNodeComponent("lastNameInput"),
    phone: makeNodeComponent("phone"),
    phoneText: makeNodeComponent("phoneText"),
    phoneInput: makeNodeComponent("phoneInput"),
    email: makeNodeComponent("email"),
    emailText: makeNodeComponent("emailText"),
    emailInput: makeNodeComponent("emailInput"),
    expectedGuestsForm: makeNodeComponent("expectedGuestsForm"),
    expectedGuestsText: makeNodeComponent("expectedGuestsText"),
    expectedGuestsInput: makeNodeComponent("expectedGuestsInput"),
    interestedInForm: makeNodeComponent("interestedInForm"),
    interestedInText: makeNodeComponent("interestedInText"),
    interestedInSelect: makeNodeComponent("interestedInSelect"),
    createdat: makeNodeComponent("createdat"),
    createdAtInput: makeNodeComponent("createdAtInput"),
    commentsForm: makeNodeComponent("commentsForm"),
    commentsText: makeNodeComponent("commentsText"),
    commentsInput: makeNodeComponent("commentsInput"),
    submitButton: makeNodeComponent("submitButton"),
    id: makeNodeComponent("id"),
    idInput: makeNodeComponent("idInput"),

    // Metadata about props expected for PlasmicFormPrivates
    internalVariantProps: PlasmicFormPrivates__VariantProps,
    internalArgProps: PlasmicFormPrivates__ArgProps
  }
);

export default PlasmicFormPrivates;
/* prettier-ignore-end */
