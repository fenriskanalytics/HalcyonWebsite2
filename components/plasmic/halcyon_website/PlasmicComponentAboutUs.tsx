/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ek7yevYSmZU9MaEHzjjyJ
// Component: eI7BZkRwT6IZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4ek7yevYSmZU9MaEHzjjyJ/projectcss
import sty from "./PlasmicComponentAboutUs.module.css"; // plasmic-import: eI7BZkRwT6IZ/css

createPlasmicElementProxy;

export type PlasmicComponentAboutUs__VariantMembers = {};
export type PlasmicComponentAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicComponentAboutUs__VariantsArgs;
export const PlasmicComponentAboutUs__VariantProps =
  new Array<VariantPropType>();

export type PlasmicComponentAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicComponentAboutUs__ArgsType;
export const PlasmicComponentAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicComponentAboutUs__OverridesType = {
  root?: Flex__<"div">;
  columns?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
};

export interface DefaultComponentAboutUsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentAboutUs__RenderFunc(props: {
  variants: PlasmicComponentAboutUs__VariantsArgs;
  args: PlasmicComponentAboutUs__ArgsType;
  overrides: PlasmicComponentAboutUs__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ku2Zh)}>
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__jkR9L)}>
            <div className={classNames(projectcss.all, sty.freeBox___3CKun)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___61Kw3
                )}
              >
                {"The Halcyon Studio Story"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wobDe
                )}
              >
                {
                  "\r\nThe inspiration behind creating Halcyon Studio stems from my belief that all forms of movement can be profoundly healing, both physically and mentally. My goal is to offer a variety of classes to help you discover what makes you feel good and supports your well-being. My own healing journey has been transformative, and just a year ago, I never imagined I\u2019d be creating this space. Life can change in an instant, turning everything upside down, but it's crucial to get back up and continue striving for oneself. After facing several personal challenges, I found solace in movement, and support in my family, and friends. Halcyon Studio came to life with these concepts as its core.\n\n\r\n\r\nWhen choosing the name, I wanted it to reflect something significant and aligned with the studio's purpose. That\u2019s why I chose \u201cHalcyon,\u201d a word that embodies the peace and tranquility I hope to bring to your life. Our focus is on movement and wellness, and we\u2019re continually looking to expand what we offer to support you on your journey. My primary intention is for you to walk through our doors, leave your worries behind, and dedicate time to caring for yourself\u2014moving in the way that feels right for you.\n\nAt Halcyon Studio, we apply these core values\u2014healing, resilience, and intentional self-care\u2014to every class we offer. Whether you're stepping into a Hot Yoga session to release stress, flowing through Reformer Pilates to build strength and alignment, or exploring other mindful movement offerings, our goal is to create a space where you feel supported, empowered, and connected. Each class is thoughtfully designed to honor where you are in your journey, with instructors who understand that movement isn\u2019t just physical\u2014it\u2019s a path to inner peace and personal transformation."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column___2AkNs)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"800px"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={{
                src: "/plasmic/halcyon_website/images/image12.png",
                fullWidth: 1665,
                fullHeight: 1733,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: typeof PlasmicImg__;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicComponentAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicComponentAboutUs__VariantsArgs;
    args?: PlasmicComponentAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicComponentAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicComponentAboutUs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentAboutUs__ArgProps,
          internalVariantPropNames: PlasmicComponentAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentAboutUs";
  } else {
    func.displayName = `PlasmicComponentAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentAboutUs = Object.assign(
  // Top-level PlasmicComponentAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicComponentAboutUs
    internalVariantProps: PlasmicComponentAboutUs__VariantProps,
    internalArgProps: PlasmicComponentAboutUs__ArgProps
  }
);

export default PlasmicComponentAboutUs;
/* prettier-ignore-end */
