/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4ek7yevYSmZU9MaEHzjjyJ
// Component: FTD1V6ByjhQi

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import NewsletterComponent from "../../NewsletterComponent"; // plasmic-import: FL9UE5cenYH-/component

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 4ek7yevYSmZU9MaEHzjjyJ/projectcss
import sty from "./PlasmicHeroHomePage.module.css"; // plasmic-import: FTD1V6ByjhQi/css

createPlasmicElementProxy;

export type PlasmicHeroHomePage__VariantMembers = {};
export type PlasmicHeroHomePage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeroHomePage__VariantsArgs;
export const PlasmicHeroHomePage__VariantProps = new Array<VariantPropType>();

export type PlasmicHeroHomePage__ArgsType = {};
type ArgPropType = keyof PlasmicHeroHomePage__ArgsType;
export const PlasmicHeroHomePage__ArgProps = new Array<ArgPropType>();

export type PlasmicHeroHomePage__OverridesType = {
  root?: Flex__<"div">;
  heroSection?: Flex__<"section">;
  freeBox?: Flex__<"div">;
  h2?: Flex__<"h2">;
  text?: Flex__<"div">;
  newsletterComponent?: Flex__<typeof NewsletterComponent>;
};

export interface DefaultHeroHomePageProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroHomePage__RenderFunc(props: {
  variants: PlasmicHeroHomePage__VariantsArgs;
  args: PlasmicHeroHomePage__ArgsType;
  overrides: PlasmicHeroHomePage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"heroSection"}
        data-plasmic-override={overrides.heroSection}
        className={classNames(projectcss.all, sty.heroSection)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Tampa's First Luxury Studio"}
          </h2>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "Yoga is a journey of self-discovery, a path to finding your focus, and a means of pushing personal limits. We offer a refined and authentic yoga experience, embracing the purity of its practice. Join us in the pursuit of inner balance, strength, and tranquility, where yoga is about reconnecting with yourself and finding your own path to well-being."
            }
          </div>
        </Stack__>
        <NewsletterComponent
          data-plasmic-name={"newsletterComponent"}
          data-plasmic-override={overrides.newsletterComponent}
          className={classNames("__wab_instance", sty.newsletterComponent)}
        />
      </section>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heroSection", "freeBox", "h2", "text", "newsletterComponent"],
  heroSection: ["heroSection", "freeBox", "h2", "text", "newsletterComponent"],
  freeBox: ["freeBox", "h2", "text"],
  h2: ["h2"],
  text: ["text"],
  newsletterComponent: ["newsletterComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroSection: "section";
  freeBox: "div";
  h2: "h2";
  text: "div";
  newsletterComponent: typeof NewsletterComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroHomePage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroHomePage__VariantsArgs;
    args?: PlasmicHeroHomePage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeroHomePage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroHomePage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroHomePage__ArgProps,
          internalVariantPropNames: PlasmicHeroHomePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroHomePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroHomePage";
  } else {
    func.displayName = `PlasmicHeroHomePage.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroHomePage = Object.assign(
  // Top-level PlasmicHeroHomePage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    text: makeNodeComponent("text"),
    newsletterComponent: makeNodeComponent("newsletterComponent"),

    // Metadata about props expected for PlasmicHeroHomePage
    internalVariantProps: PlasmicHeroHomePage__VariantProps,
    internalArgProps: PlasmicHeroHomePage__ArgProps
  }
);

export default PlasmicHeroHomePage;
/* prettier-ignore-end */
